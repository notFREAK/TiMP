Мои вопросы на ваши ответы:
   1.	Что такое первичный класс приложения? Какой обязательный метод он должен содержать?
        Ответ: Java-программа может содержать в себе любое количество классов,
   но один из них всегда имеет особый статус и непосредственно взаимодействует с оболочкой времени
   выполнения (первичный класс). В таком классе обязательно должны быть определены один
   (для приложений) или несколько (для апплетов) специальных методов. Для приложений первичный
   класс должен обязательно содержать метод main()

   2.	Какие существуют виды переменных Java, чем они отличаются друг от друга?
        Ответ: В Java существует два вида переменных. Первый - примитивные типы (primitive types).
   К ним относятся стандартные, встроенные в язык типы для представления численных значений,
   одиночных символов и булевских (двоичных, логических) значений. Все примитивные типы имеют
   предопределенный размер занимаемой ими памяти. Ко второму виду переменных - ссылочные типы
   (reference type) - относятся типы, определенные пользователем (классы, интерфейсы) и типы
   массивов. Все ссылочные типы являются динамическими типами, для них выделяется память во
   время работы программы.
   Примитивные и ссылочные типы также различаются по тому, как переменные этих типов передаются
   в качестве параметров методам (то есть функциям). Переменные примитивных типов передаются
   по значению, тогда как ссылочные переменные всегда передаются по ссылке.
   Практически самым важным различием между двумя типами переменных является то, что память для
   ссылочных переменных выделяется динамически, во время выполнения программы. Использование
   переменных ссылочных типов требует явного запрашивания требуемого количества памяти для каждой
   переменной прежде, чем можно будет сохранить в этой переменной какое-либо значение. Причина
   проста - оболочка времени выполнения сама по себе не знает, какое количество памяти требуется
   для того или иного ссылочного типа

   3.	Какие примитивные типы определены в Java?
        Ответ: Всего в Java определено восемь примитивных типов: int (4b), short (2b),
   byte (1b), long (8b), float (4b), double (8b), boolean (true, false, размер зависит
   от спецификации JVM, стандартно столько же сколько и int, т.е. 4b), char (2b).

   4.	Что делает конструктор класса? Должен ли он обязательно явно присутствовать в
   объявлении класса?
        Ответ: Можно определить, какие еще действия должны выполняться в момент
   реализации класса, определив так называемый конструктор (constructor) - метод, имеющий такое
   же имя как и класс. В классе может быть не один конструктор, они должны отличаться списком
   аргументов.
   Конструкторы можно использовать для инициализирующих действий, например для присвоения начальных
   значений. Можно использовать все определенные в классе конструкторы (с параметрами и без них),
   вызывая их при создании объектов класса. Если в классе отсутствует определение конструктора без
   параметров, то при использовании следующего оператора
   MyType obj1=new MyType();
   вызывается конструктор без параметров по умолчанию.

   5.	Какие существуют виды ссылочных типов? Как реализуются ссылочные переменные?
        Ответ: Ссылочные типы отличаются от примитивных тем, что они не определены в самом языке
   Java, и поэтому количество памяти, требуемое для переменных этих типов, заранее знать
   невозможно. Пример одного из ссылочных типов - это тип массива. Массивы языка Java могут
   состоять из переменных любых типов, включая типы, определенные пользователем
   Познакомимся с некоторыми терминами, относящимися к работе с переменными ссылочных
   типов. Когда для переменной ссылочного типа выделяется память при помощи оператора new,
   то тем самым этот ссылочный тип реализуется. Таким образом, каждая переменная ссылочного
   типа является реализацией, объектом или экземпляром соответствующего типа.
   Язык Java не позволяет просто объявить переменную ссылочного типа и сразу же начать
   записывать в нее значение. Необходимо сначала запросить у оболочки времени выполнения
   некоторый объем памяти, а оболочка, в свою очередь, должна сделать запись в своих
   внутренних таблицах, что активизирована переменная данного ссылочного типа. Весь этот
   процесс в целом и называется реализацией переменной. После реализации, когда уже имеется
   экземпляр переменной данного типа, можно использовать этот экземпляр для хранения данных.
   Важно понимать, что экземпляр переменной и сам ссылочный тип, к которому эта переменная
   относится, являются качественно различными понятиями - для хранения переменной можно
   использовать только реализованный экземпляр переменной ссылочного типа.

   6.	Что такое типы, определенные пользователем?
        Ответ: Язык Java позволяет определять новые типы с помощью новых классов, а также
   с помощью интерфейсов. Для простоты можно сказать, что классы похожи на структуры (или записи)
   языка С - они тоже позволяют хранить наборы переменных разных типов. Но в отличие от структур,
   классы помимо переменных могут хранить и методы.
   Нужно отметить, что название “типы, определенные пользователем” не подразумевает, что каждый
   пользователь сам должен определять для себя типы. В состав интерфейса прикладного
   программирования (Application Programming Interface) входят десятки стандартных классов,
   которые можно использовать в своих программах. Такие классы называются стандартными типами,
   определенными пользователем.

   7.	В чем особенности строковых переменных?
        Ответ: Данный тип представляет собой гибрид примитивных и ссылочных типов. В основе
   своей тип String является типом, определенным пользователем, так как он определяется как
   одноименный класс String, содержащий в себе методы и переменные. Но в то же время этот тип
   проявляет некоторые свойства примитивного типа, что выражается , в частности, в том, как
   осуществляется присвоение значение этим переменным при помощи знака операции = (но можно
   для инициализации создаваемых объектов пользоваться и явным вызовом конструктора)
   Несмотря на поддержку таких операций с примитивными типами как = и +, строковые переменные
   типа String являются в то же время и объектами, так что для них можно вызывать методы класса
   String, например, узнать длину строки.
   Итак, реализация переменных типа String не требует применения оператора new. Однако при
   программировании необходимо всегда помнить о том, что тип String является особым - это
   единственный определенный пользователем тип, переменные которого могут объявляться и
   использоваться без применения оператора new.

   8.	Чем массивы Java отличаются от массивов других языков, их преимущества?
        Ответ: Массивы Java имеют три важных преимущества перед массивами других языков.
   Во-первых, программисту необязательно указывать размер массива при его объявлении.
   Во-вторых, любой массив в языке Java является переменной - а это значит, что его можно
   передать как параметр методу и использовать в качестве значения, возвращаемого методом.
   И, в-третьих, не составляет никакого труда узнать, каков размер данного массива в любой
   момент времени через специальную переменную length, имеющуюся в каждом массиве

   9.	Как переменные различных видов передаются в качестве параметров методам?
        Ответ: В качестве параметров в языке Java можно передавать переменные любого типа, включая
   типы, определенные через классы, и массивы переменных любого типа и размера. Однако в качестве
   параметров переменные примитивных типов ведут себя иначе, чем переменные ссылочных типов.
   Все переменные примитивных типов передаются методам по значению (by value). Это означает, что в
   момент вызова метода делается копия переменной, передаваемой методу. Если метод в своем теле
   будет изменять значение переданной ему в качестве параметра переменной, то содержимое исходной
   переменной изменяться не будет, так как все действия будут производиться с ее копией.
   Напротив, значения переменных ссылочного типа, переданных в качестве параметров, можно изменить
   в теле метода. Когда методу в качестве параметра передается переменная ссылочного типа, то при
   изменении ее значения явным образом меняется содержимое того, на что указывает эта переменная.
   Также несмотря на то, что тип строковых переменных (тип String) является определенным
   пользователем типом, он не ведет себя как ссылочный тип при передаче параметров. Переменные
   типа String в качестве параметров всегда передаются по значению, — то есть метод, получив
   строковую переменную в качестве параметра, в своем теле будет фактически работать с копией
   этой строковой переменной. Иначе говоря, изменение строковой переменной в теле метода не влияет
   на значение этой же переменной снаружи метода.

   10.	Что такое элементы класса и элементы экземпляра класса, чем они отличаются друг от друга?
   Как нужно указывать, что переменная или метод является элементом класса, а не экземпляра?
        Ответ: В Java переменные и методы класса могут быть либо элементами класса, либо элементами
   экземпляра класса, в котором они объявлены, что определяется присутствием или отсутствием
   модификатора static.
   Если при определении элемента не используется ключевое слово static, то это элемент по умолчанию
   является динамическим (dynamic). Динамические методы и переменные всегда являются элементами
   экземпляра класса, и доступ к ним осуществляется через переменную-объект.
   Статические методы и переменные связаны с классом, а не с экземпляром класса, и поэтому имеют
   название элементов класса. Элементы класса можно использовать без создания объекта этого класса,
   доступ осуществляется через имя класса. Каждая переменная класса и каждый метод класса уникальны
   в своем классе; методы и переменные экземпляра уникальны в своем экземпляре класса. Различие
   между членами класса и экземпляра значительно, в особенности, если дело касается переменных
   Элементы класса, будучи уникальными в своем классе, используются всеми объектами, созданными
   из этого класса, - то есть все объекты, созданные из данного класса, разделяют статические
   переменные и методы, определенные в этом классе (для всех объектов существует только один
   экземпляр статической переменной). Элементы экземпляра класса, с другой стороны, создаются
   каждый раз, когда создается объект.
   Элементы класса могут, таким образом, считаться глобальными относительно класса, несмотря на
   то, что настоящие глобальные переменные в Java не поддерживаются. Когда какой-нибудь объект
   класса изменяет значение переменной класса, результат становится видим всем объектам. Благодаря
   этому переменные класса часто используют в качестве общих данных для всех объектов, созданных
   из этого класса.

   11.	Для чего используются модификаторы доступа? Какие существуют модификаторы доступа, как они
   ограничивают доступ к элементам?
        Ответ: Элемент, объявленный с ключевым словом public (открытый), доступен во всех классах,
   как в своем пакете, так и во всех классах в любом другом пакете. Этот модификатор можно
   использовать при объявлении класса. Тогда этот класс доступен для всех классов других пакетов.
   В каждом файле должен содержаться только один public класс и имя файла должно совпадать с
   именем такого класса.
   Элемент, объявленный с модификатором protected (защищенный) в некоем классе A, доступен во всех
   классах, являющихся подклассами класса A.
   Модификатор private (закрытый) сильнее всего ограничивает доступность элемента. Он его делает
   невидимым за пределами данного класса. Даже подклассы данного класса не смогут обращаться к
   элементу, объявленному как private.
   Если тип доступа к элементу не указан (доступ по умолчанию), то он доступен из всех классов,
   входящих в данный пакет.

   12.	Что позволяет делать процесс наследования? Что такое суперкласс и подкласс?
        Ответ: Наследование (inheritance), упрощает практическое использование классов, так как
   позволяет расширять уже написанные и отлаженные классы, добавляя к ним новые свойства и
   возможности. Таким образом создается то, что называется подклассом первоначального класса.
   Класс, который при этом наследуется (расширяется), называется суперклассом.

   13.	Что такое повторное использование кода?
        Ответ: При расширении класса имеется возможность использования всех написанных и отлаженных
   методов этого класса. Это свойство, называемое повторным использованием кода (code reuse),
   является одним из главных преимуществ объектно-ориентированного программирования.

   14.	Какие заранее определенные переменные содержит каждый класс Java?
        Ответ: Каждый класс Java содержит три заранее определенные переменные, которыми можно
   пользоваться: null, this, super. Первые две переменные относятся к типу Object. Коротко
   говоря, null представляет собой несуществующий объект, this указывает на текущий экземпляр
   класса, переменная super разрешает доступ к открытым переменным и методам, определенным в
   суперклассе.

   15.	Что можно сделать при помощи переменной this?
        Ответ: Переменная this используется для указания ссылки на переменную экземпляра.
   Переменная this всегда указывает на текущий класс, поэтому, чтобы в методе получить доступ
   к скрытой переменной, объявленной в текущем классе, нужно явным образом указать принадлежность
   переменной к классу
   Еще одна возможность использования этой ссылочной переменной - вызов в конструкторе класса
   другого конструктора этого же класса

   16.	Что можно сделать при помощи переменной super?
        Ответ: Переменная super ссылается на суперкласс объекта. При помощи нее можно получить
   доступ к затененным переменным и замещенным методам родительского класса. Затенение переменной
   класса в его подклассе возникает при объявлении в подклассе переменной с таким же именем, что
   и имя переменной суперкласса.
   При замещении метода в классе создается метод, имеющий то же самое имя и список параметров,
   что и метод в суперклассе. Однако можно использовать переменную super для выполнения
   замещенного метода суперкласса.
   Ипользуя переменную super, в конструкторе подкласса можно вызвать конструктор родительского
   класса. Нужно заметить, что при создании объектов подкласса сначала автоматически вызывается
   конструктор суперкласса без параметров (если он не определен, то вызывается задаваемый по
   умолчанию конструктор без параметров), а затем только конструктор подкласса. Но если в
   конструкторе подкласса есть явный вызов конструктора суперкласса, то автоматического вызова
   конструктора суперкласса без параметров не происходит. Сначала вызывается требуемый явным
   вызовом конструктор суперкласса, а затем только конструктор подкласса.
   Этот оператор должен быть первым исполняемым оператором конструктора.

   17.	Что такое скрытие переменной, затемнение переменной и замещение метода?
        Ответ:

   18.	Как импортировать классы из пакетов?
        Ответ:

   19.	Как добавить класс в пакет?
        Ответ:

   20.	Как ускорить вывод графических изображений, загружаемых из файла и устранить мерцание при выводе изображений?
        Ответ:

   21.	Объект какого типа выполняет все графические операции?
        Ответ:

   22.	Почему рекомендуется использовать ограниченный набор цветов?
        Ответ:

   23.	Почему рекомендуется использовать ограниченный набор шрифтов?
        Ответ:

   24.	Как получить список всех доступных шрифтов?
        Ответ:

   25.	Что такое событие? Когда возникают события?
        Ответ:

   26.	Что такое объект слушателя?
        Ответ:

   27.	Какие существуют способы создания слушателя события?
        Ответ:

   28.	Какие методы отвечают за обработку простых событий от мыши?
        Ответ:

   29.	Какие методы отвечают за обработку простых событий от клавиатуры?
        Ответ:

   30.	Что такое модель делегирования событий?
        Ответ:

   31.	Как подключиться к прослушиванию события?
        Ответ:

   32.	Что такое вложенные классы?
        Ответ:

   33.	Что такое анонимные классы?
        Ответ: